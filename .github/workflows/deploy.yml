name: Build and Deploy to Public Repo

on:
  push:
    tags:
      - '**'

    branches:
      - 'main'

jobs:
  build:
    name: Build for ARM (armhf)
    runs-on: ubuntu-latest

    steps:
      # Configura o QEMU para suportar a arquitetura ARM
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm

      # Checkout do código fonte
      - name: Checkout code
        uses: actions/checkout@v3

      # Extrair versão a partir da tag
      - name: Extract version from tag
        id: vars
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # Instalar dependências de build necessárias
      - name: Install debian dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libc6-dev

      # Instala Node.js com suporte para ARM
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Forçar o uso de binários pré-compilados para Node.js
      - name: Force precompiled Node.js binary
        run: |
          npm install -g pkg
          npm install -g prebuild-install
          prebuild-install -t v18.16.0 -a armv7 --install

      # Instalar dependências
      - name: Install dependencies
        run: npm install

      # Compilar a aplicação
      - name: Build the project
        run: npm run build

      # Gerar o binário usando pkg para armhf
      - name: Create ARM binary
        run: npx pkg . --targets node18-linux-armv7 --output releases/etiquetei

      # Upload do binário gerado como artefato para ser usado no próximo job
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: etiquetei-binary
          path: releases/etiquetei

  deploy:
    name: Deploy to Public Repo
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout do repositório público
      - name: Checkout public repo
        uses: actions/checkout@v3
        with:
          repository: thiagothaison/etiquetei-releases
          token: ${{ secrets.RELEASE_REPO_TOKEN }}
          path: public-repo

      # Baixar o binário gerado no job anterior
      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: etiquetei-binary

      # Copiar o binário para o repositório público
      - name: Copy binary to public repo
        run: |
          cp etiquetei public-repo/
          cd public-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add etiquetei
          git commit -m "bump: ${{ needs.build.outputs.VERSION }}"
          git push

      # Criar uma nova tag e release no repositório de releases
      - name: Create tag and release
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.RELEASE_REPO_TOKEN }}" \
          -d "{\"tag_name\": \"${{ needs.build.outputs.VERSION }}\",\"target_commitish\": \"main\",\"name\": \"${{ needs.build.outputs.VERSION }}\",\"body\": \"Release version ${{ needs.build.outputs.VERSION }}\",\"draft\": false,\"prerelease\": false}" \
          https://api.github.com/repos/thiagothaison/etiquetei-releases/releases
